[["index.html", "Data Cleaning and Visualisation using R About", " Data Cleaning and Visualisation using R Dr. Ioana Macoveciuc About Welcome to SOST70023 Data Cleaning and Visualisation using R! This notebook will host the materials for all practical exercises for this course unit. "],["how-to-use-this-notebook.html", "How to use this notebook", " How to use this notebook Describe how to use each week and how to use the menu (maybe add a picture?) "],["overview.html", "Overview", " Overview Section 1: Introducing Statistical Programming with R and RStudio Learning Outcomes: Employ the basics of the R language to run simple lines of code; Import different types of data files; Export data in different formats. In this section, you will be introduced to the following functions: Function Description Package c() concatenate function base R class() finding class of object base R length() finding length of object base R View() viewing data objects spreadsheet-style base R read_spss() reading SPSS data files haven read_dta() reading Stata data files haven read.csv() reading .csv files base R readRDS() reading .RDS files base R load() loading .RData files base R save() saving multiple files (.Rdata format) base R saveRDS() saving single files (.RDS format) base R write.csv() save a file as .csv file base R WARNING 1: Before proceeding to the exercises, ensure that you create and work in a RStudio project and that you write and save your answers to the exercises in an R script. WARNING 2: To adequately develop your practical programming skills, it is essential that you attempt all exercises by typing out the code rather than simply copy-pasting the answers. "],["performing-calculations-with-vectors.html", "1. Performing Calculations with Vectors 1.1 Exercise 1.2 Exercise 1.3 Exercise 1.4 Exercise 1.5 Exercise 1.6 Exercise", " 1. Performing Calculations with Vectors 1.1 Exercise Create a vector object called num_vct that contains the following values: 70, 8, 50, 100. Print the contents. Code # Creating the vector. num_vct &lt;- c(70, 8, 50, 100) # Now printing the contents. num_vct ## [1] 70 8 50 100 1.2 Exercise Perform the following tasks with the num_vct object: Multiply the vector by 2. Divide the vector by 10. Subtract 5 from the vector. Add 8 to the vector. Code num_vct * 2 num_vct / 10 num_vct - 5 num_vct + 8 When performing each of the operations above, you will note in the output that the operation is applied to each individual element within the vector. 1.3 Exercise Create a new numeric vector that contains the following values: 5, 7, 9, 10. Name it num_vct2 and print the contents. Code # Creating the vector. num_vct2 &lt;- c(5, 7, 9, 10) #Now printing the contents. num_vct2 ## [1] 5 7 9 10 1.4 Exercise Perform the following tasks with the following two vectors: num_vct and num_vct2. Add num_vct2 to num_vct. Divide num_vct by num_vct2. Multiply num_vct by num_vct2. Subtract num_vct from num_vct2. Code num_vct2 + num_vct num_vct / num_vct2 num_vct * num_vct2 num_vct2 - num_vct When performing each of the operations between the two vectors, you will note in the output that the operation is being applied to the element of each vector in sequential order, according to the index of each element. Let’s take the following operation as an example: num_vct2 - num_vct. The elements of num_vct are: 70, 8, 50, 100 The elements of num_vct2 are: 5, 7, 9, 10 When subtracting num_vct from num_vct2, R performs the following operations according to the ‘position’ of each element in the vector. At index [1], we have 70 for num_vct and 5 for num_vct2 At index [2], we have 8 for num_vct and 7 for num_vct2 At index [3], we have 50 for num_vct and 9 for num_vct2 At index [4], we have 100 for num_vct and 10 for num_vct2 Therefore, R will perform the subtraction operation for each element located at a given index. The output for this operation will be: [1] -65 -1 -41 -90. 1.5 Exercise Create a character vector object that contains the following: I, love, programming, with, R. Name this vector char_vct and print the contents. Code char_vct &lt;- c(&quot;I&quot;, &quot;love&quot;, &quot;programming&quot;, &quot;with&quot;, &quot;R&quot;) char_vct ## [1] &quot;I&quot; &quot;love&quot; &quot;programming&quot; &quot;with&quot; &quot;R&quot; 1.6 Exercise Perform calculations on the character vector. Code char_vct * 2 ## Error in char_vct * 2: non-numeric argument to binary operator What results do you obtain after trying to perform mathematical operations on your character vector? Why ? Let’s say we try to multiply the character vector by 2. Note the error message in the console; none of the tasks can be applied to this vector because these are all arithmetic tasks which work only on numeric vectors. "],["exploring-vectors.html", "2. Exploring Vectors 2.1 Exercise 2.2 Exercise 2.3 Exercise", " 2. Exploring Vectors 2.1 Exercise Use the class() function to find out what type of objects num_vct and char_vct are. Code class(num_vct) class(char_vct) Your R output when applying the class() function to the two vectors should have confirmed that num_vct is a “numeric” vector and that the char_vct is a “character” vector. 2.2 Exercise The number of elements in a vector is referred to as the length of the vector. With small vectors such as those you have already created, you can simply count these. Alternatively, the length() function can be used. Use the length() function to obtain the length of the following objects: num_vct, char_vct, num_vct2. Code length(num_vct) length(char_vct) length(num_vct2) Applying the function for each one of the vectors should have shown you a single number as an output, namely, the number of elements each of the vectors contains. 2.3 Exercise Create a vector object that contains the following logical and numeric values: TRUE, 6, FALSE, 10, FALSE. Name it new_vct and print the contents. Code new_vct &lt;- c(TRUE, 6, FALSE, 10, FALSE) new_vct ## [1] 1 6 0 10 0 Does the output match the contents you entered when you created the vector? Why? The output does not match the contents. Since vectors cannot contain different data types, R will force (i.e. coerce) all entered values to match, in an attempt to lose as little information as possible. In this case, the logical values are coerced to 1 and 0, corresponding to True and False respectively. This is one of the several reasons for why data cleaning is important before proceeding with data analysis; such coercions can have a significant impact on the accuracy of our data and implicitly, on your interpretation of the data. "],["importing-and-exporting-data.html", "3. Importing and Exporting Data 3.1 Exercise 3.2 Exercise 3.3 Exercise 3.4 Exercise 3.5 Exercise 3.6 Exercise 3.7 Exercise 3.8 Exercise", " 3. Importing and Exporting Data Throughout the course units of this programme, you will utilise real datasets to develop your data analysis and interpretation skills. In this exercise, you will practice how to download, access, and import data from the UK Data Service in R. You will use data from the 2019 British Social Attitudes Survey, Poverty and Welfare: Open Access Teaching Dataset. You will also have the opportunity to practice how to export data in various formats. Remember to first register with the UK Data Service. Guidance on how to do this can be found in the Section 1 learning materials on Blackboard. Navigate to the British Social Attitudes Survey (2019) webpage on the UK Data Service website. Scroll down to the end of the webpage and download the dataset in both SPSS and STATA formats on your computer. To access the SPSS data file, unzip folder and open the folders in the following sequence: UKDA-8850-spss &gt; spss &gt; spss25. Follow the same approach for accessing the STATA file. Place these two files in your root R project working directory in a subfolder called data. The recommended approach for a ‘clean’ working directory is to place all the data files you plan to use in a separate folder within your R project working directory. You should always use simple names that allow you easy access to the contents when you want to either explore the folder on your machine or specify the path to these folders in R. 3.1 Exercise Import the dataset in SPSS format; name this object bsas_spss. Code bsas_spss &lt;- read_spss(&quot;data/bsa2019_poverty_open.sav&quot;) ## Error in read_spss(&quot;data/bsa2019_poverty_open.sav&quot;): could not find function &quot;read_spss&quot; Did the import function work? Why? If you have not loaded the haven package, you will be prompted with the following error in the R console. To load the package, type library(haven) in your console first and after that, the code for importing the data. Remember to always start your work in R by first loading all the packages that you require for your session. 3.2 Exercise Import the dataset in STATA format; name this object bsas_stata. Code bsas_stata &lt;- read_dta(&quot;data/bsa2019_poverty_open.dta&quot;) How many observations and variables do the bsas_spss and bsas_stata objects have? Are these identical for both objects? There are many different ways to find the number of observations and variables such as looking at the information in the Environment tab. Since both data files are identical, both objects contain an identical number of observations and variables. 3.3 Exercise Export both bsas_spss and bsas_stata data objects in .RData format. Code save(bsas_spss, bsas_stata, file = &quot;data/bsas_objects.RData&quot;) Remember to keep your root working directory organised and save/export your data files in your data folder. 3.4 Exercise Now export bsas_spss as a single object in .RDS format. Code saveRDS(bsas_spss, &quot;data/bsas_spss_file.RDS&quot;) 3.5 Exercise Finally, export the bsas_stata object as a .csv file. Code write.csv(bsas_stata, &quot;data/bsas_stata_file.csv&quot;) 3.6 Exercise Import the .csv file you have created and name this object bsas_stata2. View the contents of the bsas_stata2 and bsas_stata objects. What are the differences between the two, if any? Why? Code bsas_stata2 &lt;- read.csv(&quot;data/bsas_stata_file.csv&quot;) Are there any differences between bsas_stata2 and bsas_stata? If there are, Why? Thebsas_stata objected imported with the haven package has accompanying metadata. When exporting data files with metadata as .csv files, this metadata is lost because this type of format does not support metadata in the same way that files such as SPSS and STATA do. Also, you may note that the bsas_stata2 has 27 rather than 26 variables; by default, the write.csv() function will automatically number each row in the data file and therefore, will produce an additional column. 3.7 Exercise Now import the .RDS created and name this object bsas_spss2. Code bsas_spss2 &lt;- readRDS(&quot;data/bsas_spss_file.RDS&quot;) 3.8 Exercise Finally, load the .Rdata file you created. Code load(&quot;data/bsas_objects.RData&quot;) You will use some of these data objects in future practicals. Please make sure that you keep all of the data files from this section in your data folder. "],["bonus-task-data-on-github.html", "4. Bonus Task: Data on GitHub 4.1 Exercise 4.2 Exercise 4.3 Exercise 4.4 Exercise", " 4. Bonus Task: Data on GitHub Importing Data from Github Repositories Many different types of data can be imported in R using either base R functions or functions from packages. However, R is not limited to importing ‘hard copy’ files from your machine but also supports direct import of data files located on websites for example. GitHub is a cloud-based, online platform that allows programming users to openly share research projects, associated documentation, data files, and comments with other users and/or the public. You will learn more about GitHub later in the course. Explore the Johns Hopkins Whiting School of Engineering COVID-19 Github Repository. Open the csse_covid_19_data folder found at the beginning of the page. Then open the csse_covid_19_time_series folder. Click on time_series_covid19_confirmed_global.csv link. Click on the Raw button on the right hand side of the screen. The webpage will now show you a long series of numbers. This is the ‘data file’ that you need to import. Note that this file is a .csv file. The same base R function you have previously used will also work in this case. 4.1 Exercise To import the data file, create a new object called covid_johnshop. Within the base R .csv function, paste the full data file web link. Do not forget to enclose this link with quotation marks. Code covid_johnshop &lt;- read.csv(&quot;https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_global.csv&quot;) 4.2 Exercise View the contents of this object. Code View(covid_johnshop) 4.3 Exercise Find the class of the object. Code class(covid_johnshop) ## [1] &quot;data.frame&quot; 4.4 Exercise Export the data as a .csv file. Code write.csv(covid_johnshop, &quot;data/covid_johnshop.csv&quot;) "],["overview-1.html", "Overview", " Overview Section 2: The Structure of Data Objects Learning Outcomes: Differentiate between vectors, data frames, lists, and matrices; Apply rules of data structures to create different types of objects. In this section, you will be introduced to the following functions:: Function Description Package factor() function to create factors base R data.frame() function to create data frames base R list() function to create lists base R matrix() function to create matrices base R WARNING 1: Before proceeding to the exercises, ensure that you create and work in a RStudio project and that you write and save your answers to the exercises in an R script. WARNING 2: To adequately develop your practical programming skills, it is essential that you attempt all exercises by typing out the code rather than simply copy-pasting the answers. "],["practical-1.html", "Practical 1 1.1 Vectors and Factors 1.2 Data Frames and Lists 1.3 Matrices and Arrays 1.4 Bonus Task", " Practical 1 1.1 Vectors and Factors 1.1.1 Exercise Create and print a vector object named data_vct that contains the following values: 8, incorrect, 9.8. Code data_vct &lt;- c(8, &quot;incorrect&quot;, 9.8) data_vct ## [1] &quot;8&quot; &quot;incorrect&quot; &quot;9.8&quot; What output does R produce? Why? Vectors can only contain a single data type since they are homogenous structures and in this exercise, there are two data types in this vector, namely numeric and character. When R detects multiple data types within a vector, it will, by default, coerce all values to a single data type. Since the character value cannot be coerced to a numeric value, R will coerce all values to character. This is irrespective of whether the values are logical or numeric. Alternatively, if you did not place the word “incorrect” between inverted commas such as data_vct &lt;- c(8, incorrect, 9.8), then the attempt to create the vector would have failed and you would have been prompted by an error message: Error: object 'incorrect' not found. The reason for this is that only logical values can be specified as text in vectors without inverted commas; anything else will be a character value and must be specified within inverted commas. 1.1.2 Exercise Create a vector object named data_vct2 that contains the following values: 8, FALSE, 9.8. Code data_vct2 &lt;- c(8, FALSE, 9.8) class(data_vct2) ## [1] &quot;numeric&quot; What output does R produce? What class is this vector? Why? This is another example of how R coerces values to have a consistent data type when detecting heterogeneity in a vector. In this case, the word FALSE must be specified as a logical value. This value is coerced to numeric because, by default, logical values in R are converted to 0 and 1, corresponding to FALSE and TRUE respectively. Alternatively, if you have specified the word FALSE as a character value, then the logical value would have been coerced to a character value and the vector would have been a vector of class character. 1.1.3 Exercise Create a vector object named data_vct3 that contains the following values: 8, False, 9.8, True. Code data_vct3 &lt;- c(8, False, 9.8, True) ## Error in eval(expr, envir, enclos): object &#39;False&#39; not found What output does R produce? Why? If your treated this value as a logical value, then you would have obtained an error since logical values are case sensitive and can only take two different forms: TRUE or T, FALSE or F. 1.1.4 Exercise Create a factor named data_fct that contains the following values: bus, car, car, car, train, bus, bus, train, train. Print the contents, find the number of levels, and confirm the class. Code data_fct &lt;- factor(c(&quot;bus&quot;, &quot;car&quot;, &quot;car&quot;, &quot;car&quot;, &quot;train&quot;, &quot;bus&quot;, &quot;bus&quot;, &quot;train&quot;, &quot;train&quot;)) data_fct class(data_fct) This object is of class factor and has three levels bus, car, train. The output should look like below: data_fct [1] bus car car car train bus bus train train Levels: bus car train class(data_fct) [1] \"factor\" 1.1.5 Exercise Create three vectors as follows: A numeric vector called num_vct which contains the following values: 50, 10, 45, 90. A character vector called char_vct which contains the following values: This, is, a, string, vector. A logical vector called logic_vct which contains the following values: TRUE, FALSE, FALSE, TRUE, TRUE. Code num_vct &lt;- c(50, 10, 45, 90) char_vct &lt;- c(&quot;This&quot;, &quot;is&quot;, &quot;a&quot;, &quot;string&quot;, &quot;vector&quot;) logic_vct &lt;- c(TRUE, FALSE, FALSE, TRUE, TRUE) 1.2 Data Frames and Lists 1.2.1 Exercise Create a data frame called df by combing the following three vectors you previously created (num_vct, char_vct, logic_vct). Code df &lt;- data.frame(num_vct, char_vct, logic_vct) ## Error in data.frame(num_vct, char_vct, logic_vct): arguments imply differing number of rows: 4, 5 What does the R output say? Why? As you probably already noticed when finding the lengths of each vector earlier in the practical, the numeric vector has 4 rows whilst the character and logical vectors have 5 rows. When creating data frames, all vectors must have the same length, otherwise, you will be prompted by an error: Error in data.frame(num_vct, char_vct, logic_vct) : arguments imply differing number of rows: 4, 5. 1.2.2 Exercise Since a data frame cannot be created with vectors of different lengths, try to instead create a list object called list_one and print the contents. Code # Creating the list list_one &lt;- list(num_vct, char_vct, logic_vct) # Printing the list. list_one ## [[1]] ## [1] 50 10 45 90 ## ## [[2]] ## [1] &quot;This&quot; &quot;is&quot; &quot;a&quot; &quot;string&quot; &quot;vector&quot; ## ## [[3]] ## [1] TRUE FALSE FALSE TRUE TRUE Did you successfully create a list? Why did this work (or didn’t)? The list was created successfully since lists are both heterogenous structures and can take different types of items regardless of their structure. No error message should appear. Can you find out how many variables and observations this list has? How about the number of items? List structures do not have variables or observations since they are a storage mode of different types of items. Instead, lists are defined by the number of items they contain. If you print the contents, you can confirm that this list has 3 items. 1.2.3 Exercise Use the View() function to visualise the contents of the list. Code View(list_one) Is the output similar to that from a data frame object? Why not? The View() function produces a different output for lists than in does for data frames since these are different structures. Data frames have rows and columns whilst lists have items. The view function is not very useful for lists because it is designed for users to visualise data values, but it does provide some relevant information such as the number of items, the data type of each item, and a compact summary of the values of each item. 1.2.4 Exercise Create a new vector called num_vct3 with the following values: 50, 10, 45, 90, 5. Code num_vct3 &lt;- c(50, 10, 45, 90, 5) 1.2.5 Exercise Create a data frame called df_one by combing num_vct3 with the following logical and character vectors you created earlier (char_vct, logic_vct). Then print the contents. Code df_one &lt;- data.frame(num_vct3, char_vct, logic_vct) df_one ## num_vct3 char_vct logic_vct ## 1 50 This TRUE ## 2 10 is FALSE ## 3 45 a FALSE ## 4 90 string TRUE ## 5 5 vector TRUE How many variables and observations does this data frame have? There are 5 observations of 3 variables. This is easy to identify with small data objects such as this one. For larger datasets, you can easily spot this by looking under the Environment tab. 1.2.6 Exercise Create a list called list_two by combining three of the vectors you created earlier (num_vct3, num_vct, char_vct, logic_vct). Code list_two &lt;- list(num_vct3, num_vct, char_vct, logic_vct) 1.3 Matrices and Arrays 1.3.1 Exercise Create and print a matrix named matrix_one that contains the following values: 1, 4, 6, 10. The values must be placed in two rows and two columns. Code matrix_one &lt;- matrix(c(1,4,6,10), nrow = 2, ncol = 2) matrix_one ## [,1] [,2] ## [1,] 1 6 ## [2,] 4 10 1.3.2 Exercise Create and print a matrix named matrix_two that contains the following sequence of values: 10 to 13. The values must be placed in one row row and four columns. Code matrix_two &lt;- matrix(10:13, nrow = 1, ncol = 4) matrix_two ## [,1] [,2] [,3] [,4] ## [1,] 10 11 12 13 1.3.3 Exercise Create a matrix named matrix_three using the following numeric vector you created earlier (num_vct). The values must be placed in four rows and one column. Print the contents. Code matrix_three &lt;- matrix(num_vct, nrow = 4, ncol = 1) matrix_three ## [,1] ## [1,] 50 ## [2,] 10 ## [3,] 45 ## [4,] 90 1.4 Bonus Task Create a list using the list of items below and name it list_example. Print the contents num_vct matrix_three df_one list_two \"character string\" 1000 Code list_example &lt;- list(num_vct, matrix_three, df_one, list_two, &quot;character string&quot;, 1000) list_example ## [[1]] ## [1] 50 10 45 90 ## ## [[2]] ## [,1] ## [1,] 50 ## [2,] 10 ## [3,] 45 ## [4,] 90 ## ## [[3]] ## num_vct3 char_vct logic_vct ## 1 50 This TRUE ## 2 10 is FALSE ## 3 45 a FALSE ## 4 90 string TRUE ## 5 5 vector TRUE ## ## [[4]] ## [[4]][[1]] ## [1] 50 10 45 90 5 ## ## [[4]][[2]] ## [1] 50 10 45 90 ## ## [[4]][[3]] ## [1] &quot;This&quot; &quot;is&quot; &quot;a&quot; &quot;string&quot; &quot;vector&quot; ## ## [[4]][[4]] ## [1] TRUE FALSE FALSE TRUE TRUE ## ## ## [[5]] ## [1] &quot;character string&quot; ## ## [[6]] ## [1] 1000 Is it possible for a list to contain any type of data structure and if so why? Can you find out how many items the list has? Lists are highly flexible data structures and can contain any data type or object items, regardless of whether they are single values, or more complex structures. Lists also support nesting, which means that they can also contain other lists. There are 6 items in this list: a vector, a matrix, a data frame, a list, a character value, and a numeric value. This list is quite a large one and printing the contents is not a very useful way to view the items. You will learn alternatives functions to display data structures more compactly later in the course. "],["practical-2.html", "Practical 2 2.1 Exploring Homogenous Data Structures 2.2 Exploring Heterogenous Data Structures", " Practical 2 2.1 Exploring Homogenous Data Structures 2.1.1 Exercise Create the following vectors: A numeric vector called numeric_vct comprising of: 8, 10, 5, 9, 6, 0, 2, 3. A character vector called char_vct comprising of: bus, train, train, car, car, bus, train, bus. A factor called commuting comprising of the same values as those of char_vct. A factor called commuting2 comprising of the same values as those of commuting. Use the levels argument to specify the following levels to the factor: bus, car, train, taxi. A numeric vector called num_vct comprising of: 1, 2, 1, 3, 2, 3, 3, 1, 1, 2, 2, 4, 2, 4, 4. Transform this numeric vector into a factor called education and assign it the following labels: GCSE, Alevel, undergraduate, graduate. Code numeric_vector &lt;- c(8, 10, 5, 9, 6, 0, 2, 3) char_vct &lt;- c(&quot;bus&quot;, &quot;train&quot;, &quot;train&quot;, &quot;car&quot;, &quot;car&quot;, &quot;bus&quot;, &quot;train&quot;, &quot;bus&quot;) commuting &lt;- factor(char_vct) commuting2 &lt;- factor(char_vct, levels = c(&quot;bus&quot;, &quot;car&quot;, &quot;train&quot;, &quot;taxi&quot;)) num_vct &lt;- c(1, 2, 1, 3, 2, 3, 3, 1, 1, 2, 2, 4, 2, 4, 4) education &lt;- factor(num_vct, labels = c(&quot;GCSE&quot;, &quot;Alevel&quot;, &quot;undergraduate&quot;, &quot;graduate&quot;)) Explore commuting and commuting2 using the table() function. How do the levels and number of observations of these two vectors differ? Code table(commuting) table(commuting2) The object values are of course identical for levels bus, car, and train but you have also added one more level to commuting2, namely taxi. As you would have seen in the output in your RStudio console, there are zero observations for this factor level. &gt; table(commuting2) bus car train taxi 3 2 3 0 Versus &gt; table(commuting) bus car train 3 2 3 This illustrates that levels can be added to factors even though observations for that particular level are not present in the ‘dataset’. This is an important feature of factors during statistical analysis since the absence of data is meaningful for categorical variables. 2.1.2 Exercise Create a matrix object called matrix_object using one of the numeric vectors you created earlier (numeric_vector). The matrix must have 2 rows and 4 columns. Code matrix_object &lt;- matrix(numeric_vector, nrow = 2, ncol = 4) Find the class, length, and dimensions. Code class(matrix_object) ## [1] &quot;matrix&quot; &quot;array&quot; Code length(matrix_object) ## [1] 8 Code dim(matrix_object) ## [1] 2 4 2.2 Exploring Heterogenous Data Structures Exercise 2.2.1 Create a data frame called data_frame by combining the three objects you created earlier (numeric_vector, char_vct and commuting). Code data_frame &lt;- data.frame(numeric_vector, char_vct, commuting) Find the class, dimensions and attributes. Code class(data_frame) ## [1] &quot;data.frame&quot; Code dim(data_frame) ## [1] 8 3 Code attributes(data_frame) ## $names ## [1] &quot;numeric_vector&quot; &quot;char_vct&quot; &quot;commuting&quot; ## ## $class ## [1] &quot;data.frame&quot; ## ## $row.names ## [1] 1 2 3 4 5 6 7 8 Exercise 2.2.2 Use the appropriate functions to compactly view the first and last parts of the data_frame object. Code head(data_frame) ## numeric_vector char_vct commuting ## 1 8 bus bus ## 2 10 train train ## 3 5 train train ## 4 9 car car ## 5 6 car car ## 6 0 bus bus Code tail(data_frame) ## numeric_vector char_vct commuting ## 3 5 train train ## 4 9 car car ## 5 6 car car ## 6 0 bus bus ## 7 2 train train ## 8 3 bus bus Exercise 2.2.3 Use the appropriate function to confirm the names of the columns of data_frame. Code colnames(data_frame) ## [1] &quot;numeric_vector&quot; &quot;char_vct&quot; &quot;commuting&quot; Code # OR names(data_frame) ## [1] &quot;numeric_vector&quot; &quot;char_vct&quot; &quot;commuting&quot; Exercise 2.2.4 Create a list called list_combined by combing the following objects you previously created (numeric_vector, commuting, education, and data_frame). Code list_combined &lt;- list(numeric_vector, commuting, education, data_frame) Exercise 2.2.5 Use the appropriate function to view the contents of list_combined in a compact form. Code str(list_combined) ## List of 4 ## $ : num [1:8] 8 10 5 9 6 0 2 3 ## $ : Factor w/ 3 levels &quot;bus&quot;,&quot;car&quot;,&quot;train&quot;: 1 3 3 2 2 1 3 1 ## $ : Factor w/ 4 levels &quot;GCSE&quot;,&quot;Alevel&quot;,..: 1 2 1 3 2 3 3 1 1 2 ... ## $ :&#39;data.frame&#39;: 8 obs. of 3 variables: ## ..$ numeric_vector: num [1:8] 8 10 5 9 6 0 2 3 ## ..$ char_vct : chr [1:8] &quot;bus&quot; &quot;train&quot; &quot;train&quot; &quot;car&quot; ... ## ..$ commuting : Factor w/ 3 levels &quot;bus&quot;,&quot;car&quot;,&quot;train&quot;: 1 3 3 2 2 1 3 1 What does the output tell you about list_combined? The str() function provides the total number of items in an object (in this case a list), the class of each item, as well as the number of elements within each item. There are 4 items; in the order in which they would appear in your console, these are: a numeric vector of 8 elements, a factor with 3 levels, a factor with 4 levels, and a data frame composed of a numeric, character, and factor. "],["practical-3.html", "Practical 3 0.1 3. Working with Datasets", " Practical 3 0.1 3. Working with Datasets In Section 1, you have completed a series of file import/export exercises using data from British Social Attitudes Survey (2019): Open Access Teaching Dataset. For this practical, you will use one of the objects you have exported as a .csv file in your R project data folder, namely the bsas_stata object. "],["overview-2.html", "Overview", " Overview Section 3: Manipulating and Tidying Data Learning Outcomes: ADD ILOS. In this section, you will practice how to use the following functions: Function Description Package c() concatenate function base R WARNING 1: Before proceeding to the exercises, ensure that you create and work in a RStudio project and that you write and save your answers to the exercises in an R script. WARNING 2: To adequately develop your practical programming skills, it is essential that you attempt all exercises by typing out the code rather than simply copy-pasting the answers. "],["practical-1-1.html", "Practical 1", " Practical 1 "],["overview-3.html", "Overview", " Overview Section 4: Reproducible Workflows with R Markdown Learning Outcomes: ADD ILOS. In this section, you will practice how to use the following functions: Function Description Package c() concatenate function base R WARNING 1: Before proceeding to the exercises, ensure that you create and work in a RStudio project and that you write and save your answers to the exercises in an R script. WARNING 2: To adequately develop your practical programming skills, it is essential that you attempt all exercises by typing out the code rather than simply copy-pasting the answers. "],["practical-1-2.html", "Practical 1", " Practical 1 "],["overview-4.html", "Overview", " Overview Section 5: Data Visualisation Learning Outcomes: ADD ILOS. In this section, you will practice how to use the following functions: Function Description Package c() concatenate function base R WARNING 1: Before proceeding to the exercises, ensure that you create and work in a RStudio project and that you write and save your answers to the exercises in an R script. WARNING 2: To adequately develop your practical programming skills, it is essential that you attempt all exercises by typing out the code rather than simply copy-pasting the answers. "],["practical-1-3.html", "Practical 1", " Practical 1 "],["overview-5.html", "Overview", " Overview Section 6: Working with Special Data Types: Text Data Learning Outcomes: ADD ILOS. In this section, you will practice how to use the following functions: Function Description Package c() concatenate function base R WARNING 1: Before proceeding to the exercises, ensure that you create and work in a RStudio project and that you write and save your answers to the exercises in an R script. WARNING 2: To adequately develop your practical programming skills, it is essential that you attempt all exercises by typing out the code rather than simply copy-pasting the answers. "],["practical-1-4.html", "Practical 1", " Practical 1 "],["overview-6.html", "Overview", " Overview Section 7: Programming with R Learning Outcomes: ADD ILOS. In this section, you will practice how to use the following functions: Function Description Package c() concatenate function base R WARNING 1: Before proceeding to the exercises, ensure that you create and work in a RStudio project and that you write and save your answers to the exercises in an R script. WARNING 2: To adequately develop your practical programming skills, it is essential that you attempt all exercises by typing out the code rather than simply copy-pasting the answers. "],["practical-1-5.html", "Practical 1", " Practical 1 "],["overview-7.html", "Overview", " Overview Section 8: Practising Data Cleaning and Visualisation: Formative Peer-Review Case Study Learning Outcomes: ADD ILOS. In this section, you will practice how to use the following functions: Function Description Package c() concatenate function base R WARNING 1: Before proceeding to the exercises, ensure that you create and work in a RStudio project and that you write and save your answers to the exercises in an R script. WARNING 2: To adequately develop your practical programming skills, it is essential that you attempt all exercises by typing out the code rather than simply copy-pasting the answers. "],["practical-1-6.html", "Practical 1", " Practical 1 "],["references.html", "References", " References "],["404.html", "Page not found", " Page not found The page you requested cannot be found (perhaps it was moved or renamed). You may want to try searching to find the page's new location, or use the table of contents to find the page you are looking for. "]]
